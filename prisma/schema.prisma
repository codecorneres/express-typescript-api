// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  // Relations
  users User[]
}

model User {
  id        Int      @id @default(autoincrement())
  status    Boolean  @default(true)
  email     String   @unique
  name      String
  password  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  role_id Int
  role    Role @relation(fields: [role_id], references: [id])

  projects        User_Project[]
  ownerProjects   Project[]
  Timesheet       Timesheet[]
  Comments        Comment[]
  Attachments     Attachment[]
  issueAssignedBy Issue[]        @relation("assignedBy")
  issueAssignedTo Issue[]        @relation("assignedTo")
  lists           Lists[]
}

model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner_id    Int?

  // Relations
  users       User_Project[]
  owner       User?          @relation(fields: [owner_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  timesheets  Timesheet[]
  comments    Comment[]
  attachments Attachment[]
  issues      Issue[]
  lists       Lists[]
}

model Lists {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user_id    Int?
  user       User?    @relation(fields: [user_id], references: [id])
  issue_id   Int?
  issue      Issue?   @relation(fields: [issue_id], references: [id])
  project_id Int?
  project    Project? @relation(fields: [project_id], references: [id])
}

model Issue {
  id           Int      @id @default(autoincrement())
  issue_number String?  @unique
  title        String
  description  String?
  estimate     Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  assigned_by  Int?
  assigned     User?    @relation("assignedBy", fields: [assigned_by], references: [id], onDelete: SetNull, onUpdate: Cascade)
  assigned_to  Int?
  assignee     User?    @relation("assignedTo", fields: [assigned_to], references: [id], onDelete: SetNull, onUpdate: Cascade)
  status_id    Int?
  status       Status?  @relation(fields: [status_id], references: [id])
  project_id   Int?
  project      Project? @relation(fields: [project_id], references: [id])

  // Relations
  Timesheet   Timesheet[]
  Comments    Comment[]
  Attachments Attachment[]
  Lists       Lists[]
}

model Status {
  id     Int     @id @default(autoincrement())
  title  String
  Issues Issue[]
}

model Attachment {
  id        Int      @id @default(autoincrement())
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user_id    Int
  user       User    @relation(fields: [user_id], references: [id])
  project_id Int
  project    Project @relation(fields: [project_id], references: [id])
  issue_id   Int
  issue      Issue   @relation(fields: [issue_id], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user_id    Int
  user       User    @relation(fields: [user_id], references: [id])
  project_id Int
  project    Project @relation(fields: [project_id], references: [id])
  issue_id   Int
  issue      Issue   @relation(fields: [issue_id], references: [id])
}

model User_Project {
  // Relations
  user_id    Int
  user       User    @relation(fields: [user_id], references: [id])
  project_id Int
  project    Project @relation(fields: [project_id], references: [id])
  // @@unique([user_id, project_id])

  @@id([user_id, project_id])
}

model Timesheet {
  id              Int      @id @default(autoincrement())
  description     String?
  time_in_minutes Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user_id    Int
  user       User    @relation(fields: [user_id], references: [id])
  project_id Int
  project    Project @relation(fields: [project_id], references: [id])
  issue_id   Int
  issue      Issue   @relation(fields: [issue_id], references: [id])
}
